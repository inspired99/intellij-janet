/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.inspired99.intellijjanet.lang;

import com.intellij.psi.tree.IElementType;

import com.github.inspired99.intellijjanet.lang.JanetTokenType;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import com.intellij.lexer.FlexLexer;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/elisey/ITMO/IDE/other/mylexer/intellij-janet/src/main/java/com/github/inspired99/intellijjanet/lang/_JanetLexer.flex</tt>
 */
public class _JanetLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LITERAL_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\15\1\22\2\24\1\23\22\0\1\15\1\0\1\11\1\25\3\0\1\12\1\20\1\21\1\41"+
    "\1\40\1\0\1\6\1\2\1\42\1\4\11\1\2\0\1\52\1\51\1\53\1\44\1\17\6\3\24\7\1\14"+
    "\1\0\1\16\1\0\1\10\1\13\1\33\1\50\1\3\1\47\1\31\1\32\2\7\1\37\2\7\1\34\1\7"+
    "\1\36\1\46\1\45\1\7\1\27\1\35\1\26\1\30\1\54\1\7\1\5\1\43\1\7\12\0\1\24\32"+
    "\0\1\15\337\0\1\15\177\0\13\15\35\0\2\24\5\0\1\15\57\0\1\15\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\3\1\1\5"+
    "\1\6\1\7\2\10\1\1\1\11\6\3\1\12\1\13"+
    "\1\14\4\3\1\15\1\16\1\17\1\3\1\0\1\2"+
    "\2\0\1\20\1\0\1\21\1\0\1\11\1\0\1\22"+
    "\1\0\1\11\5\0\1\23\1\0\2\3\1\24\5\3"+
    "\1\25\1\26\1\3\1\27\2\3\1\30\1\3\1\31"+
    "\1\32\2\21\2\22\7\0\1\11\4\0\1\33\2\3"+
    "\1\34\1\35\1\3\1\36\1\37\1\40\1\3\1\41"+
    "\1\3\1\42\4\0\1\23\2\0\1\11\3\0\1\11"+
    "\1\43\1\3\1\44\1\3\1\45\3\0\1\11\1\0"+
    "\1\11\1\46\1\47\1\0\4\11\1\23\3\0\1\33"+
    "\3\11\1\33\3\11\2\0\3\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\55\0\55\0\u01c2\0\u01ef\0\u01c2\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\55"+
    "\0\55\0\u0384\0\u03b1\0\u03de\0\u040b\0\55\0\u0438\0\55"+
    "\0\u0465\0\55\0\u0492\0\u04bf\0\u04ec\0\55\0\u010e\0\55"+
    "\0\u0519\0\u0546\0\u013b\0\55\0\u0573\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\55\0\u06ae\0\u06db\0\u0708\0\207"+
    "\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\207\0\55\0\u0816"+
    "\0\207\0\u0843\0\u0870\0\55\0\u089d\0\u04bf\0\u04ec\0\u01c2"+
    "\0\u021c\0\u01c2\0\u021c\0\u08ca\0\u08f7\0\u0168\0\u0924\0\u0951"+
    "\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\55"+
    "\0\u0ab9\0\u0ae6\0\207\0\207\0\u0b13\0\207\0\207\0\207"+
    "\0\u0b40\0\207\0\u0b6d\0\207\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21"+
    "\0\u01c2\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\207\0\u0d89\0\55\0\u0db6\0\207\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\207\0\207\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u021c\0\u0fd2\0\u0fff\0\u102c\0\u01c2\0\u1059"+
    "\0\u1086\0\u10b3\0\u021c\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\4\1\6\1\4"+
    "\1\2\1\7\1\2\1\10\1\11\2\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\3\4\1\22"+
    "\1\23\1\4\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\4\1\2\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\22\42\3\0\1\20\30\42\1\43\1\44"+
    "\1\42\1\43\15\42\3\0\1\20\30\42\1\4\1\42"+
    "\3\4\1\42\2\4\11\42\3\0\1\20\12\4\3\42"+
    "\1\4\1\42\4\4\3\42\1\4\1\42\1\43\1\44"+
    "\1\42\1\43\1\45\14\42\3\0\1\20\30\42\1\3"+
    "\2\42\1\3\1\42\1\46\13\42\3\0\1\20\27\42"+
    "\11\47\1\50\1\42\7\47\3\51\1\52\27\47\11\53"+
    "\1\42\1\53\1\54\6\53\3\55\1\56\27\53\1\42"+
    "\1\57\1\42\1\60\1\61\1\60\1\62\1\60\1\42"+
    "\1\63\4\42\1\64\3\42\3\0\1\20\12\60\3\42"+
    "\1\60\1\42\4\60\3\42\1\60\20\42\1\65\1\42"+
    "\3\0\1\20\27\42\77\0\1\15\32\0\22\20\3\0"+
    "\30\20\1\42\1\4\1\42\3\4\1\42\2\4\11\42"+
    "\3\0\1\20\1\4\1\66\10\4\3\42\1\4\1\42"+
    "\4\4\3\42\1\4\1\42\1\4\1\42\3\4\1\42"+
    "\2\4\11\42\3\0\1\20\5\4\1\67\2\4\1\70"+
    "\1\4\3\42\1\4\1\42\1\4\1\71\2\4\3\42"+
    "\1\4\1\42\1\4\1\42\3\4\1\42\2\4\11\42"+
    "\3\0\1\20\6\4\1\72\1\4\1\73\1\4\3\42"+
    "\1\4\1\42\4\4\3\42\1\4\1\42\1\4\1\42"+
    "\3\4\1\42\2\4\11\42\3\0\1\20\3\4\1\74"+
    "\6\4\3\42\1\4\1\42\4\4\3\42\1\4\1\42"+
    "\1\4\1\42\3\4\1\42\2\4\11\42\3\0\1\20"+
    "\11\4\1\75\3\42\1\4\1\42\4\4\3\42\1\4"+
    "\1\42\1\4\1\42\3\4\1\42\2\4\11\42\3\0"+
    "\1\20\4\4\1\76\5\4\3\42\1\4\1\42\4\4"+
    "\3\42\1\4\22\42\3\0\1\20\12\42\1\77\15\42"+
    "\1\4\1\42\3\4\1\42\2\4\11\42\3\0\1\20"+
    "\1\4\1\100\10\4\3\42\1\4\1\42\4\4\3\42"+
    "\1\4\1\42\1\4\1\42\3\4\1\42\2\4\11\42"+
    "\3\0\1\20\1\4\1\101\10\4\3\42\1\4\1\42"+
    "\4\4\3\42\1\4\1\42\1\4\1\42\3\4\1\42"+
    "\2\4\11\42\3\0\1\20\3\4\1\102\6\4\3\42"+
    "\1\4\1\42\4\4\3\42\1\4\1\42\1\4\1\42"+
    "\2\4\1\103\1\42\2\4\11\42\3\0\1\20\12\4"+
    "\3\42\1\4\1\42\4\4\3\42\1\4\22\42\3\0"+
    "\1\20\23\42\1\104\4\42\1\4\1\42\3\4\1\42"+
    "\2\4\11\42\3\0\1\20\5\4\1\105\4\4\3\42"+
    "\1\4\1\42\4\4\3\42\1\4\1\42\1\43\2\42"+
    "\1\43\15\42\3\0\1\20\30\42\1\106\2\42\1\106"+
    "\15\42\3\0\1\20\30\42\1\107\1\42\2\107\15\42"+
    "\3\0\1\20\3\42\3\107\13\42\2\107\4\42\11\51"+
    "\1\110\1\0\42\51\11\52\1\111\1\20\7\52\3\51"+
    "\30\52\11\55\1\0\1\55\1\112\41\55\11\56\1\20"+
    "\1\56\1\113\6\56\3\55\30\56\1\42\1\114\1\115"+
    "\1\42\1\114\10\42\1\116\4\42\3\117\1\20\30\42"+
    "\1\60\1\42\3\60\1\42\2\60\4\42\1\116\4\42"+
    "\3\117\1\20\12\60\3\42\1\60\1\42\4\60\3\42"+
    "\1\60\1\42\1\114\1\115\1\42\1\114\1\120\7\42"+
    "\1\116\4\42\3\117\1\20\30\42\1\57\2\42\1\57"+
    "\15\42\3\0\1\20\27\42\11\63\1\121\1\42\7\63"+
    "\3\122\1\123\27\63\1\42\1\124\1\42\1\125\1\124"+
    "\1\125\1\126\1\125\1\42\1\127\7\42\1\130\3\0"+
    "\1\20\12\125\3\42\1\125\1\42\4\125\3\42\1\125"+
    "\1\42\1\4\1\42\3\4\1\42\2\4\11\42\3\0"+
    "\1\20\2\4\1\131\7\4\3\42\1\4\1\42\4\4"+
    "\3\42\1\4\1\42\1\4\1\42\3\4\1\42\2\4"+
    "\11\42\3\0\1\20\6\4\1\132\3\4\3\42\1\4"+
    "\1\42\4\4\3\42\1\4\1\42\1\4\1\42\3\4"+
    "\1\42\2\4\11\42\3\0\1\20\1\4\1\133\10\4"+
    "\3\42\1\4\1\42\4\4\3\42\1\4\1\42\1\4"+
    "\1\42\3\4\1\42\2\4\11\42\3\0\1\20\6\4"+
    "\1\134\3\4\3\42\1\4\1\42\4\4\3\42\1\4"+
    "\1\42\1\4\1\42\3\4\1\42\2\4\11\42\3\0"+
    "\1\20\12\4\3\42\1\135\1\42\2\4\1\136\1\4"+
    "\3\42\1\4\1\42\1\4\1\42\3\4\1\42\2\4"+
    "\11\42\3\0\1\20\1\137\11\4\3\42\1\4\1\42"+
    "\4\4\3\42\1\4\1\42\1\4\1\42\3\4\1\42"+
    "\2\4\11\42\3\0\1\20\6\4\1\140\3\4\3\42"+
    "\1\4\1\42\4\4\3\42\1\4\1\42\1\4\1\42"+
    "\3\4\1\42\2\4\11\42\3\0\1\20\11\4\1\141"+
    "\3\42\1\4\1\42\4\4\3\42\1\4\1\42\1\4"+
    "\1\42\3\4\1\42\2\4\11\42\3\0\1\20\4\4"+
    "\1\142\5\4\3\42\1\4\1\42\4\4\3\42\1\4"+
    "\1\42\1\4\1\42\3\4\1\42\2\4\11\42\3\0"+
    "\1\20\12\4\3\42\1\4\1\42\1\4\1\143\2\4"+
    "\3\42\1\4\1\42\1\4\1\42\3\4\1\42\2\4"+
    "\11\42\3\0\1\20\1\4\1\144\10\4\3\42\1\4"+
    "\1\42\4\4\3\42\1\4\1\42\1\114\2\42\1\114"+
    "\10\42\1\116\4\42\3\117\1\20\30\42\1\114\2\42"+
    "\1\114\15\42\3\0\1\20\27\42\1\0\1\145\1\0"+
    "\1\146\1\147\1\146\1\150\1\146\1\0\1\122\4\0"+
    "\1\151\7\0\12\146\3\0\1\146\1\0\4\146\3\0"+
    "\1\146\1\42\1\152\1\42\2\152\15\42\3\0\1\20"+
    "\3\42\3\152\13\42\2\152\21\42\1\116\4\42\3\117"+
    "\1\20\27\42\11\122\1\153\1\0\42\122\11\123\1\154"+
    "\1\20\7\123\3\122\30\123\1\42\1\124\1\155\1\125"+
    "\1\124\1\125\1\126\1\125\1\42\1\127\7\42\1\130"+
    "\3\0\1\20\12\125\3\42\1\125\1\42\4\125\3\42"+
    "\1\125\1\42\1\156\1\42\1\125\1\156\1\125\1\126"+
    "\2\125\1\127\7\42\1\130\3\0\1\20\12\125\3\42"+
    "\1\125\1\42\4\125\3\42\1\125\1\42\1\124\2\42"+
    "\1\124\15\42\3\0\1\20\27\42\11\127\1\65\1\42"+
    "\7\127\3\157\1\160\27\127\1\42\1\4\1\42\3\4"+
    "\1\42\2\4\11\42\3\0\1\20\3\4\1\161\6\4"+
    "\3\42\1\4\1\42\4\4\3\42\1\4\1\42\1\4"+
    "\1\42\3\4\1\42\2\4\11\42\3\0\1\20\7\4"+
    "\1\162\2\4\3\42\1\4\1\42\4\4\3\42\1\4"+
    "\1\42\1\4\1\42\3\4\1\42\2\4\11\42\3\0"+
    "\1\20\12\4\3\42\1\4\1\163\4\4\3\42\1\4"+
    "\1\42\1\4\1\42\3\4\1\42\2\4\11\42\3\0"+
    "\1\20\10\4\1\164\1\4\3\42\1\4\1\42\4\4"+
    "\3\42\1\4\1\42\1\4\1\42\3\4\1\42\2\4"+
    "\11\42\3\0\1\20\1\4\1\165\10\4\3\42\1\4"+
    "\1\42\4\4\3\42\1\4\1\0\1\166\1\167\1\0"+
    "\1\166\10\0\1\117\4\0\3\117\31\0\1\146\1\0"+
    "\3\146\1\0\2\146\4\0\1\117\4\0\3\117\1\0"+
    "\12\146\3\0\1\146\1\0\4\146\3\0\1\146\1\0"+
    "\1\166\1\167\1\0\1\166\1\170\7\0\1\117\4\0"+
    "\3\117\31\0\1\145\2\0\1\145\50\0\1\42\1\152"+
    "\1\42\2\152\10\42\1\116\4\42\3\117\1\20\3\42"+
    "\3\152\13\42\2\152\4\42\15\0\1\117\4\0\3\117"+
    "\30\0\15\20\1\171\4\20\3\117\30\20\1\42\1\65"+
    "\2\42\1\65\15\42\3\0\1\20\30\42\1\156\1\155"+
    "\1\125\1\156\1\125\1\126\2\125\1\127\7\42\1\130"+
    "\3\0\1\20\12\125\3\42\1\125\1\42\4\125\3\42"+
    "\1\125\11\157\1\172\1\0\42\157\11\160\1\173\1\20"+
    "\7\160\3\157\30\160\1\42\1\4\1\42\3\4\1\42"+
    "\2\4\11\42\3\0\1\20\3\4\1\174\6\4\3\42"+
    "\1\4\1\42\4\4\3\42\1\4\1\42\1\4\1\42"+
    "\3\4\1\42\2\4\11\42\3\0\1\20\1\175\11\4"+
    "\3\42\1\4\1\42\4\4\3\42\1\4\1\0\1\166"+
    "\2\0\1\166\10\0\1\117\4\0\3\117\31\0\1\166"+
    "\2\0\1\166\51\0\1\176\1\0\2\176\24\0\3\176"+
    "\13\0\2\176\4\0\1\20\1\177\1\20\1\200\1\201"+
    "\1\200\1\202\1\200\1\20\1\123\4\20\1\203\3\20"+
    "\3\0\1\20\12\200\3\20\1\200\1\20\4\200\3\20"+
    "\1\200\1\0\1\204\1\0\1\205\1\204\1\205\1\206"+
    "\1\205\1\0\1\157\7\0\1\207\4\0\12\205\3\0"+
    "\1\205\1\0\4\205\3\0\1\205\1\20\1\210\1\20"+
    "\1\211\1\210\1\211\1\212\1\211\1\20\1\160\7\20"+
    "\1\213\3\0\1\20\12\211\3\20\1\211\1\20\4\211"+
    "\3\20\1\211\1\0\1\176\1\0\2\176\10\0\1\117"+
    "\4\0\3\117\4\0\3\176\13\0\2\176\4\0\1\20"+
    "\1\214\1\215\1\20\1\214\10\20\1\171\4\20\3\117"+
    "\31\20\1\200\1\20\3\200\1\20\2\200\4\20\1\171"+
    "\4\20\3\117\1\20\12\200\3\20\1\200\1\20\4\200"+
    "\3\20\1\200\1\20\1\214\1\215\1\20\1\214\1\216"+
    "\7\20\1\171\4\20\3\117\31\20\1\177\2\20\1\177"+
    "\15\20\3\0\30\20\1\0\1\204\1\217\1\205\1\204"+
    "\1\205\1\206\1\205\1\0\1\157\7\0\1\207\4\0"+
    "\12\205\3\0\1\205\1\0\4\205\3\0\1\205\1\0"+
    "\1\220\1\0\1\205\1\220\1\205\1\206\2\205\1\157"+
    "\7\0\1\207\4\0\12\205\3\0\1\205\1\0\4\205"+
    "\3\0\1\205\1\0\1\204\2\0\1\204\50\0\1\20"+
    "\1\210\1\221\1\211\1\210\1\211\1\212\1\211\1\20"+
    "\1\160\7\20\1\213\3\0\1\20\12\211\3\20\1\211"+
    "\1\20\4\211\3\20\1\211\1\20\1\222\1\20\1\211"+
    "\1\222\1\211\1\212\2\211\1\160\7\20\1\213\3\0"+
    "\1\20\12\211\3\20\1\211\1\20\4\211\3\20\1\211"+
    "\1\20\1\210\2\20\1\210\15\20\3\0\31\20\1\214"+
    "\2\20\1\214\10\20\1\171\4\20\3\117\31\20\1\214"+
    "\2\20\1\214\15\20\3\0\31\20\1\223\1\20\2\223"+
    "\15\20\3\0\4\20\3\223\13\20\2\223\4\20\1\0"+
    "\1\172\2\0\1\172\51\0\1\220\1\217\1\205\1\220"+
    "\1\205\1\206\2\205\1\157\7\0\1\207\4\0\12\205"+
    "\3\0\1\205\1\0\4\205\3\0\1\205\1\20\1\173"+
    "\2\20\1\173\15\20\3\0\31\20\1\222\1\221\1\211"+
    "\1\222\1\211\1\212\2\211\1\160\7\20\1\213\3\0"+
    "\1\20\12\211\3\20\1\211\1\20\4\211\3\20\1\211"+
    "\1\20\1\223\1\20\2\223\10\20\1\171\4\20\3\117"+
    "\4\20\3\223\13\20\2\223\4\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\13\1\1\11\1\1\1\11\22\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\5\0\1\1\1\0\22\1\1\11\1\1"+
    "\1\11\1\1\7\0\1\1\4\0\15\1\4\0\1\11"+
    "\2\0\1\1\3\0\6\1\3\0\1\1\1\0\3\1"+
    "\1\0\5\1\3\0\1\11\7\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JanetLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 40: break;
          case 2: 
            { return JanetTokenType.getDecIntNum();
            } 
            // fall through
          case 41: break;
          case 3: 
            { return JanetTokenType.getIDENTIFIER();
            } 
            // fall through
          case 42: break;
          case 4: 
            { return JanetTokenType.getSUB();
            } 
            // fall through
          case 43: break;
          case 5: 
            { return JanetTokenType.getBUFFER();
            } 
            // fall through
          case 44: break;
          case 6: 
            { return JanetTokenType.getlParenthesis();
            } 
            // fall through
          case 45: break;
          case 7: 
            { return JanetTokenType.getrParenthesis();
            } 
            // fall through
          case 46: break;
          case 8: 
            { return JanetTokenType.getNewLine();
            } 
            // fall through
          case 47: break;
          case 9: 
            { return JanetTokenType.getLineComment();
            } 
            // fall through
          case 48: break;
          case 10: 
            { return JanetTokenType.getADD();
            } 
            // fall through
          case 49: break;
          case 11: 
            { return JanetTokenType.getMULT();
            } 
            // fall through
          case 50: break;
          case 12: 
            { return JanetTokenType.getDIV();
            } 
            // fall through
          case 51: break;
          case 13: 
            { return JanetTokenType.getEQ();
            } 
            // fall through
          case 52: break;
          case 14: 
            { return JanetTokenType.getLT();
            } 
            // fall through
          case 53: break;
          case 15: 
            { return JanetTokenType.getGT();
            } 
            // fall through
          case 54: break;
          case 16: 
            { return JanetTokenType.getDecrByOne();
            } 
            // fall through
          case 55: break;
          case 17: 
            { return JanetTokenType.getOneLineStr();
            } 
            // fall through
          case 56: break;
          case 18: 
            { return JanetTokenType.getSingleLongStr();
            } 
            // fall through
          case 57: break;
          case 19: 
            { return JanetTokenType.getARRAY();
            } 
            // fall through
          case 58: break;
          case 20: 
            { return JanetTokenType.getFUNCTION();
            } 
            // fall through
          case 59: break;
          case 21: 
            { return JanetTokenType.getIF();
            } 
            // fall through
          case 60: break;
          case 22: 
            { return JanetTokenType.getIncrByOne();
            } 
            // fall through
          case 61: break;
          case 23: 
            { return JanetTokenType.getOR();
            } 
            // fall through
          case 62: break;
          case 24: 
            { return JanetTokenType.getLE();
            } 
            // fall through
          case 63: break;
          case 25: 
            { return JanetTokenType.getFloatNum();
            } 
            // fall through
          case 64: break;
          case 26: 
            { return JanetTokenType.getHexNum();
            } 
            // fall through
          case 65: break;
          case 27: 
            { return JanetTokenType.getMAP();
            } 
            // fall through
          case 66: break;
          case 28: 
            { return JanetTokenType.getFOR();
            } 
            // fall through
          case 67: break;
          case 29: 
            { return JanetTokenType.getALL();
            } 
            // fall through
          case 68: break;
          case 30: 
            { return JanetTokenType.getAND();
            } 
            // fall through
          case 69: break;
          case 31: 
            { return JanetTokenType.getSET();
            } 
            // fall through
          case 70: break;
          case 32: 
            { return JanetTokenType.getNIL();
            } 
            // fall through
          case 71: break;
          case 33: 
            { return JanetTokenType.getDEF();
            } 
            // fall through
          case 72: break;
          case 34: 
            { return JanetTokenType.getVAR();
            } 
            // fall through
          case 73: break;
          case 35: 
            { return JanetTokenType.getTRUE();
            } 
            // fall through
          case 74: break;
          case 36: 
            { return JanetTokenType.getANY();
            } 
            // fall through
          case 75: break;
          case 37: 
            { return JanetTokenType.getXOR();
            } 
            // fall through
          case 76: break;
          case 38: 
            { return JanetTokenType.getFALSE();
            } 
            // fall through
          case 77: break;
          case 39: 
            { return JanetTokenType.getPRINT();
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
